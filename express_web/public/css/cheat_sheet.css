/* Paragraphs that come immediately after any image
 The adjacent sibling combinator (+) separates two selectors and matches the second element
 only if it immediately follows the first element, and both are children of the same parent element.
*/
img + p {
    font-style: bold;
}

/* Paragraphs that are siblings of and
   subsequent to any image

   The general sibling combinator (~) separates two selectors and
   matches the second element only if it follows the first element
   though not necessarily immediately), and both are children of the same parent element.

   selects any p element that proceeds any img element
   p and img must be siblings, e.g belong to the same parent
*/
img ~ p {
    color: red;
}

/*
    List items that are children of the "my-things" list
    The child combinator (>) is placed between two CSS selectors.
    It matches only those elements matched by the second selector that
    are the children of elements matched by the first.

    Elements matched by the second selector must be the immediate children
    of the elements matched by the first selector. This is stricter than the
    descendant selector, which matches all elements matched by the second selector
    for which there exists an ancestor element
    matched by the first selector, regardless of the number of "hops" up the DOM.
*/
ul.my-things > li {
    margin: 2em;
}


/* <a> elements with a title attribute */
a[title] {
    color: purple;
}

/* <a> elements with an href matching "https://example.org" */
a[href="https://example.org"] {
    color: green;
}

/* <a> elements with an href containing "example" */
a[href*="example"] {
    font-size: 2em;
}

/* <a> elements with an href ending ".org" */
a[href$=".org"] {
    font-style: italic;
}

/*
    ^= begging with
    $= ending with
    *= containing
    [i] postfix e.g [href*="something" i] means something containing something case insensitive
    [attr~=value]
    Represents an element with an attribute name of attr whose value is a whitespace-separated list of words, one of which is exactly value.

 */

/* Internal links, beginning with "#" */
a[href^="#"] {
    background-color: gold;
}

/* Links with "example" anywhere in the URL */
a[href*="example"] {
    background-color: silver;
}

/* Links with "insensitive" anywhere in the URL,
   regardless of capitalization */
a[href*="insensitive" i] {
    color: cyan;
}

/* Links that end in ".org" */
a[href$=".org"] {
    color: red;
}

/**
    Attribute selectors:
    [attr]
    Represents an element with an attribute name of attr.
    [attr=value]
    Represents an element with an attribute name of attr whose value is exactly value.
    [attr~=value]
    Represents an element with an attribute name of attr whose value is a whitespace-separated list of words, one of which is exactly value.
    [attr|=value]
    Represents an element with an attribute name of attr whose value can be exactly value or can begin with value immediately followed by a hyphen, - (U+002D). It is often used for language subcode matches.
    [attr^=value]
    Represents an element with an attribute name of attr whose value is prefixed (preceded) by value.
    [attr$=value]
    Represents an element with an attribute name of attr whose value is suffixed (followed) by value.
    [attr*=value]
    Represents an element with an attribute name of attr whose value contains at least one occurrence of value within the string.
    [attr operator value i]
    Adding an i (or I) before the closing bracket causes the value to be compared case-insensitively (for characters within the ASCII range).
 */

/**
    Media queries


    max-width = 600 pixels and below
     min-width = 600 pixels and abovve

    @media(min-width:600px){

    }
 */


/*
    Psuedo classes:


    :active
    :any-link
    :checked
    :default
    :defined
    :dir()
    :disabled
    :empty
    :enabled
    :first
    :first-child
    :first-of-type
    :fullscreen
    :focus
    :focus-within
    :hover
    :indeterminate
    :in-range
    :invalid
    :lang()
    :last-child
    :last-of-type
    :left
    :link
    :not()
    :nth-child()
    :nth-last-child()
    :nth-last-of-type()
    :nth-of-type()
    :only-child
    :only-of-type
    :optional
    :out-of-range
    :placeholder-shown
    :read-only
    :read-write
    :required
    :right
    :root
    :scope
    :target
    :valid
    :visited
    :first-line, :first-letter, :before and :after
 */